lista general de comandos y opciones básicos de Git en un formato profesional y detallado:
Inicialización:
    git init: Este comando inicializa un nuevo repositorio Git en el directorio actual. Después de ejecutar este comando, el directorio actual se convierte en un repositorio Git y puede comenzar a seguir y controlar versiones de los archivos en el directorio.
    git clone [url]: Este comando permite clonar un repositorio Git existente en una URL en un nuevo directorio con el mismo nombre que el repositorio remoto.
    git clone [url] [directorio]: Este comando permite clonar un repositorio Git existente en una URL en un nuevo directorio con un nombre especificado.

Seguimiento de archivos:
    git add [archivo]: Este comando permite agregar un archivo o todos los cambios en el directorio actual a la "zona de preparación" para el próximo commit. La "zona de preparación" es una especie de área temporal donde se almacenan los cambios que desea confirmar en el repositorio.
    git rm [archivo]: Este comando permite eliminar un archivo del repositorio Git y la zona de seguimiento. Después de ejecutar este comando, el archivo ya no estará disponible en versiones futuras del repositorio.
    git mv [origen] [destino]: Este comando permite mover o renombrar un archivo en el repositorio Git y la zona de seguimiento. Después de ejecutar este comando, el archivo estará disponible en versiones futuras del repositorio con su nuevo nombre o ubicación.

Confirmación:
    git commit -m "mensaje": Este comando permite confirmar los cambios en la zona de preparación en el repositorio con un mensaje de confirmación especificado. Después de ejecutar este comando, los cambios se registrarán en el repositorio y estarán disponibles en versiones futuras del mismo.
    git commit -a -m "mensaje": Este comando permite confirmar todos los cambios actuales en el repositorio, incluyendo aquellos que ya están seguidos, con un mensaje de confirmación especificado.
    git commit --amend -m "mensaje": Este comando permite modificar el último commit con un nuevo mensaje de confirmación especificado. Esto es útil cuando se han realizado cambios adicionales después de

Fusiones y rebase:
git merge [nombre de rama]: Fusiona la rama especificada con la rama actual.
git rebase [nombre de rama]: Reaplica los cambios de la rama especificada en la rama actual.

Sincronización con un repositorio remoto:
git fetch [nombre de repositorio]: Descarga los cambios de un repositorio remoto, pero no los integra en la rama actual.
git pull [nombre de repositorio] [nombre de rama]: Descarga y fusiona los cambios de un repositorio remoto y una rama específicos en la rama actual.
git push [nombre de repositorio] [nombre de rama]: Sube los cambios de la rama actual a un repositorio remoto y una rama específica.

Etiquetado:
git tag [nombre de etiqueta]: Crea una etiqueta con el nombre especificado en la confirmación actual.
git tag -d [nombre de etiqueta]: Elimina una etiqueta con el nombre especificado.
git show [nombre de etiqueta]: Muestra información sobre una etiqueta específica, incluyendo el autor, la fecha y el mensaje de confirmación.


Operaciones con archivos:
    git add [archivo]: Este comando permite agregar un archivo o todos los cambios en el directorio actual a la "zona de preparación" para el próximo commit. La "zona de preparación" es una especie de área temporal donde se almacenan los cambios que desea confirmar en el repositorio.
    git rm [archivo]: Este comando permite eliminar un archivo del repositorio Git y la zona de seguimiento. Después de ejecutar este comando, el archivo ya no estará disponible en versiones futuras del repositorio.
    git mv [origen] [destino]: Este comando permite mover o renombrar un archivo en el repositorio Git y la zona de seguimiento. Después de ejecutar este comando, el archivo estará disponible en versiones futuras del repositorio con su nuevo nombre o ubicación.

Confirmación:
    git commit -m "mensaje": Este comando permite confirmar los cambios en la zona de preparación en el repositorio con un mensaje de confirmación especificado. Después de ejecutar este comando, los cambios se registrarán en el repositorio y estarán disponibles en versiones futuras del mismo.
    git commit -a -m "mensaje": Este comando permite confirmar todos los cambios actuales en el repositorio, incluyendo aquellos que ya están seguidos, con un mensaje de confirmación especificado.
    git commit --amend -m "mensaje": Este comando permite modificar el último commit con un nuevo mensaje de confirmación especificado. Esto es útil cuando se han realizado cambios adicionales después de"

Ramas y fusiones:
git branch [nombre]: Este comando permite crear una nueva rama en el repositorio. Después de ejecutar este comando, se pueden realizar cambios en la nueva rama sin afectar la rama principal.
git checkout [nombre]: Este comando permite cambiar a una rama específica en el repositorio. Después de ejecutar este comando, se pueden realizar cambios en la rama seleccionada.
git merge [nombre]: Este comando permite combinar la rama especificada con la rama actual. Después de ejecutar este comando, los cambios de la rama especificada se incorporarán a la rama actual.

Historial y comparación:
git log: Este comando permite ver el historial de confirmaciones en el repositorio.
git diff [origen] [destino]: Este comando permite comparar los cambios entre dos versiones específicas del repositorio o entre el repositorio y la zona de preparación.

Sincronización con un repositorio remoto:
git clone [url]: Este comando permite clonar un repositorio remoto a la máquina local. Después de ejecutar este comando, se tendrá una copia completa del repositorio en la máquina local.
git push [nombre]: Este comando permite enviar los cambios locales al repositorio remoto. Después de ejecutar este comando, los cambios se reflejarán en el repositorio remoto.
git pull: Este comando permite descargar los cambios del repositorio remoto a la máquina local. Después de ejecutar este comando, se tendrán los últimos cambios en la máquina local.


Historial y Diferencias:
git log: Este comando muestra el historial de confirmaciones en el repositorio, incluyendo la fecha, el autor y el mensaje de confirmación.
git diff [archivo]: Este comando muestra las diferencias entre los cambios en el archivo especificado y la última versión confirmada en el repositorio.
git diff --staged [archivo]: Este comando muestra las diferencias entre el archivo especificado en la zona de preparación y la última versión confirmada en el repositorio.

Ramificación:
git branch: Este comando muestra una lista de ramas existentes en el repositorio.
git branch [nombre_rama]: Este comando permite crear una nueva rama con el nombre especificado.
git checkout [nombre_rama]: Este comando permite cambiar a la rama especificada.
git merge [nombre_rama]: Este comando permite combinar los cambios de la rama especificada con la rama actual.
git branch -d [nombre_rama]: Este comando permite eliminar la rama especificada.

Etiquetado:
git tag: Este comando muestra una lista de etiquetas existentes en el repositorio.
git tag [nombre_etiqueta] [hash_commit]: Este comando permite crear una nueva etiqueta con el nombre especificado en el commit especificado.
git show [nombre_etiqueta]: Este comando muestra información detallada sobre la etiqueta especificada, incluyendo el autor, fecha y mensaje de confirmación.

Sincronización con un repositorio remoto:
git clone [url_repositorio]: Este comando permite clonar un repositorio remoto en su máquina local.
git pull [nombre_repositorio] [nombre_rama]: Este comando permite descargar los cambios más recientes del repositorio remoto especificado y combinarlos con la rama local actual.
git push [nombre_repositorio] [nombre_rama]: Este comando permite enviar los cambios locales al repositorio remoto especificado.

Visualización y comparación:
git log: Este comando muestra un registro de todas las confirmaciones realizadas en el repositorio, incluyendo información como el autor, la fecha y el mensaje de confirmación.
git diff [nombre_rama1] [nombre_rama2]: Este comando muestra las diferencias entre dos ramas o entre la rama actual y una rama específica. Esto es útil para ver los cambios realizados en el repositorio y comparar diferentes versiones.
git show [commit]: Este comando muestra los detalles de una confirmación específica, incluyendo información como el autor, la fecha y el mensaje de confirmación, así como los cambios realizados en el repositorio.

Historial:
git log: Este comando permite ver el historial de los commits realizados en el repositorio, incluyendo información como el autor, la fecha, el mensaje de confirmación y el ID del commit.
git show [commit]: Este comando permite ver los detalles de un commit específico, incluyendo el código fuente y el mensaje de confirmación.

Deshacer cambios:
git checkout [commit]: Este comando permite revertir los cambios en el repositorio a un estado específico, identificado por el ID del commit.
git reset [commit]: Este comando permite eliminar los commits recientes y revertir los cambios en el repositorio a un estado anterior, identificado por el ID del commit.
git revert [commit]: Este comando permite deshacer los cambios de un commit específico, creando un nuevo commit que anula los cambios en lugar de eliminarlos completamente.

Ramificación:
git branch: Este comando permite ver una lista de todas las ramas existentes en el repositorio.
git branch [nombre]: Este comando permite crear una nueva rama con el nombre especificado.
git checkout -b [nombre]: Este comando permite crear una nueva rama y cambiar a ella de inmediato.
git checkout [nombre]: Este comando permite cambiar a una rama existente con el nombre especificado.
git merge [nombre]: Este comando permite combinar los cambios de una rama con la rama actual, resolviendo cualquier conflicto que pueda surgir entre ellos.

Desarrollo conjunto:
git branch [nombre]: Este comando permite crear una nueva rama en el repositorio. Las ramas se utilizan para el desarrollo independiente y permiten a los colaboradores trabajar en diferentes versiones del repositorio sin afectar la principal.

less

git checkout [nombre]: Este comando permite cambiar de una rama a otra en el repositorio. Esto es útil cuando desea cambiar a una rama en particular para continuar su trabajo.

git merge [nombre]: Este comando permite fusionar una rama con la rama actual. Esto es útil cuando desea combinar los cambios realizados en una rama en otra.

git pull: Este comando permite descargar los cambios más recientes del repositorio remoto en la rama actual. Esto es útil para mantener su repositorio local actualizado con el repositorio remoto.

Colaboración remota:
git clone [url]: Este comando permite clonar un repositorio remoto a su sistema local. Después de ejecutar este comando, tendrá una copia completa del repositorio en su sistema.
git push: Este comando permite enviar los cambios locales al repositorio remoto. Esto es útil para compartir sus cambios con otros colaboradores y mantener el repositorio remoto actualizado.
git fetch: Este comando permite descargar los cambios más recientes del repositorio remoto sin combinarlos con su rama local. Esto es útil para revisar los cambios en el repositorio remoto antes de fusionarlos con su rama local.

Se han recopilado los comandos básicos más comunes.
